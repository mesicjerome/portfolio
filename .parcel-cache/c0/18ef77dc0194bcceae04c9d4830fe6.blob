var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _three = require('three');
var _threeExamplesJsmControlsOrbitControlsJs = require('three/examples/jsm/controls/OrbitControls.js');
var _shadersFragmentGlsl = require('./shaders/fragment.glsl');
var _shadersFragmentGlslDefault = _parcelHelpers.interopDefault(_shadersFragmentGlsl);
var _shadersVertexGlsl = require('./shaders/vertex.glsl');
var _shadersVertexGlslDefault = _parcelHelpers.interopDefault(_shadersVertexGlsl);
class Sketch {
  constructor(options) {
    this.container = options.domElement;
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.camera = new _three.PerspectiveCamera(70, this.width / this.height, 0.01, 10);
    this.camera.position.z = 1;
    this.scene = new _three.Scene();
    this.renderer = new _three.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    // this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setPixelRatio(2);
    this.container.appendChild(this.renderer.domElement);
    this.controls = new _threeExamplesJsmControlsOrbitControlsJs.OrbitControls(this.camera, this.renderer.domElement);
    this.time = 0;
    this.resize();
    this.addObjects();
    this.render();
    this.setupResize();
  }
  resize() {
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.renderer.setSize(this.width, this.height);
    this.camera.aspect = this.width / this.height;
    this.camera.updateProjectionMatrix();
  }
  setupResize() {
    window.addEventListener('resize', this.resize.bind(this));
  }
  addObjects() {
    this.geometry = new _three.BoxGeometry(0.2, 0.2, 0.2);
    // this.geometry = new THREE.SphereBufferGeometry( 0.2, 3, 3 );
    this.material = new _three.MeshNormalMaterial();
    this.material = new _three.MeshBasicMaterial({
      color: 0xffff00
    });
    this.material = new _three.MeshLambertMaterial();
    this.material = new _three.ShaderMaterial({
      uniforms: {
        time: {
          value: 1.0
        },
        resolution: {
          value: new _three.Vector2()
        }
      },
      vertexShader: _shadersVertexGlslDefault.default,
      fragmentShader: _shadersFragmentGlslDefault.default
    });
    this.mesh = new _three.Mesh(this.geometry, this.material);
    this.scene.add(this.mesh);
  }
  render() {
    this.time += 0.05;
    this.mesh.rotation.x = this.time / 2000;
    this.mesh.rotation.y = this.time / 1000;
    this.renderer.render(this.scene, this.camera);
    // console.log(this.time);
    requestAnimationFrame(this.render.bind(this));
  }
}
exports.default = Sketch;
new Sketch({
  domElement: document.getElementById('container')
});
